// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.1
// 	protoc        v5.29.2
// source: internal/types/pluginproto/plugin.proto

package pluginproto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 插件信息
type PluginInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 插件唯一编号
	No string `protobuf:"bytes,1,opt,name=no,proto3" json:"no,omitempty"`
	// 插件名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 插件拥有的方法
	Methods []string `protobuf:"bytes,3,rep,name=methods,proto3" json:"methods,omitempty"`
	// 插件版本
	Version string `protobuf:"bytes,4,opt,name=version,proto3" json:"version,omitempty"`
	// 插件优先级, 数字越大优先级越高
	Priority int32 `protobuf:"varint,5,opt,name=priority,proto3" json:"priority,omitempty"`
	// PersistAfter方法是否同步调用
	PersistAfterSync bool `protobuf:"varint,6,opt,name=persistAfterSync,proto3" json:"persistAfterSync,omitempty"`
	// Reply方法是否同步调用
	ReplySync bool `protobuf:"varint,7,opt,name=replySync,proto3" json:"replySync,omitempty"`
	// 插件配置模版
	ConfigTemplate *ConfigTemplate `protobuf:"bytes,8,opt,name=configTemplate,proto3" json:"configTemplate,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *PluginInfo) Reset() {
	*x = PluginInfo{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PluginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginInfo) ProtoMessage() {}

func (x *PluginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginInfo.ProtoReflect.Descriptor instead.
func (*PluginInfo) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{0}
}

func (x *PluginInfo) GetNo() string {
	if x != nil {
		return x.No
	}
	return ""
}

func (x *PluginInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PluginInfo) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *PluginInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginInfo) GetPriority() int32 {
	if x != nil {
		return x.Priority
	}
	return 0
}

func (x *PluginInfo) GetPersistAfterSync() bool {
	if x != nil {
		return x.PersistAfterSync
	}
	return false
}

func (x *PluginInfo) GetReplySync() bool {
	if x != nil {
		return x.ReplySync
	}
	return false
}

func (x *PluginInfo) GetConfigTemplate() *ConfigTemplate {
	if x != nil {
		return x.ConfigTemplate
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          string                 `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Label         string                 `protobuf:"bytes,3,opt,name=label,proto3" json:"label,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Field) Reset() {
	*x = Field{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{1}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Field) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type ConfigTemplate struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fields        []*Field               `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigTemplate) Reset() {
	*x = ConfigTemplate{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigTemplate) ProtoMessage() {}

func (x *ConfigTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigTemplate.ProtoReflect.Descriptor instead.
func (*ConfigTemplate) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigTemplate) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

// 插件启动返回
type StartupResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 节点id
	NodeId uint64 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// 是否成功
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// 错误信息
	ErrMsg string `protobuf:"bytes,3,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
	// 沙盒路径
	SandboxDir string `protobuf:"bytes,4,opt,name=sandboxDir,proto3" json:"sandboxDir,omitempty"`
	// 配置
	Config        []byte `protobuf:"bytes,5,opt,name=config,proto3" json:"config,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartupResp) Reset() {
	*x = StartupResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartupResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartupResp) ProtoMessage() {}

func (x *StartupResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartupResp.ProtoReflect.Descriptor instead.
func (*StartupResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{3}
}

func (x *StartupResp) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *StartupResp) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartupResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *StartupResp) GetSandboxDir() string {
	if x != nil {
		return x.SandboxDir
	}
	return ""
}

func (x *StartupResp) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

// 发送包
type SendPacket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 发送者
	FromUid string `protobuf:"bytes,1,opt,name=fromUid,proto3" json:"fromUid,omitempty"`
	// 接收频道
	ChannelId string `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`
	// 频道类型
	ChannelType uint32 `protobuf:"varint,3,opt,name=channelType,proto3" json:"channelType,omitempty"`
	// 消息内容
	Payload       []byte `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendPacket) Reset() {
	*x = SendPacket{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPacket) ProtoMessage() {}

func (x *SendPacket) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPacket.ProtoReflect.Descriptor instead.
func (*SendPacket) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{4}
}

func (x *SendPacket) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *SendPacket) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SendPacket) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *SendPacket) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 接收包
type RecvPacket struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 发送者
	FromUid string `protobuf:"bytes,1,opt,name=fromUid,proto3" json:"fromUid,omitempty"`
	// 接受者
	ToUid string `protobuf:"bytes,2,opt,name=toUid,proto3" json:"toUid,omitempty"`
	// 接收频道
	ChannelId string `protobuf:"bytes,3,opt,name=channelId,proto3" json:"channelId,omitempty"`
	// 频道类型
	ChannelType uint32 `protobuf:"varint,4,opt,name=channelType,proto3" json:"channelType,omitempty"`
	// 消息内容
	Payload       []byte `protobuf:"bytes,5,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RecvPacket) Reset() {
	*x = RecvPacket{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RecvPacket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecvPacket) ProtoMessage() {}

func (x *RecvPacket) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecvPacket.ProtoReflect.Descriptor instead.
func (*RecvPacket) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{5}
}

func (x *RecvPacket) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *RecvPacket) GetToUid() string {
	if x != nil {
		return x.ToUid
	}
	return ""
}

func (x *RecvPacket) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *RecvPacket) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *RecvPacket) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type Message struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 消息唯一id（全局唯一）
	MessageId int64 `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	// 消息序号（频道内严格递增）
	MessageSeq uint64 `protobuf:"varint,2,opt,name=messageSeq,proto3" json:"messageSeq,omitempty"`
	// 客户端消息编号
	ClientMsgNo string `protobuf:"bytes,3,opt,name=clientMsgNo,proto3" json:"clientMsgNo,omitempty"`
	// 流编号
	StreamNo string `protobuf:"bytes,4,opt,name=streamNo,proto3" json:"streamNo,omitempty"`
	// 流序号
	StreamId uint64 `protobuf:"varint,5,opt,name=streamId,proto3" json:"streamId,omitempty"`
	// 消息时间戳
	Timestamp uint32 `protobuf:"varint,6,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// 发送者
	From string `protobuf:"bytes,7,opt,name=from,proto3" json:"from,omitempty"`
	// 接收频道
	ChannelId string `protobuf:"bytes,8,opt,name=channelId,proto3" json:"channelId,omitempty"`
	// 频道类型
	ChannelType uint32 `protobuf:"varint,9,opt,name=channelType,proto3" json:"channelType,omitempty"`
	// topic
	Topic string `protobuf:"bytes,10,opt,name=topic,proto3" json:"topic,omitempty"`
	// 消息内容
	Payload       []byte `protobuf:"bytes,11,opt,name=payload,proto3" json:"payload,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Message) Reset() {
	*x = Message{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{6}
}

func (x *Message) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *Message) GetMessageSeq() uint64 {
	if x != nil {
		return x.MessageSeq
	}
	return 0
}

func (x *Message) GetClientMsgNo() string {
	if x != nil {
		return x.ClientMsgNo
	}
	return ""
}

func (x *Message) GetStreamNo() string {
	if x != nil {
		return x.StreamNo
	}
	return ""
}

func (x *Message) GetStreamId() uint64 {
	if x != nil {
		return x.StreamId
	}
	return 0
}

func (x *Message) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Message) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Message) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Message) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *Message) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *Message) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type MessageBatch struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Messages      []*Message             `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageBatch) Reset() {
	*x = MessageBatch{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageBatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageBatch) ProtoMessage() {}

func (x *MessageBatch) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageBatch.ProtoReflect.Descriptor instead.
func (*MessageBatch) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{7}
}

func (x *MessageBatch) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

// http请求
type HttpRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 请求方法
	Method string `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	// 请求路径
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	// 请求头
	Headers map[string]string `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 查询参数
	Query map[string]string `protobuf:"bytes,4,rep,name=query,proto3" json:"query,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 请求体
	Body          []byte `protobuf:"bytes,5,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpRequest) Reset() {
	*x = HttpRequest{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpRequest) ProtoMessage() {}

func (x *HttpRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpRequest.ProtoReflect.Descriptor instead.
func (*HttpRequest) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{8}
}

func (x *HttpRequest) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *HttpRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *HttpRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpRequest) GetQuery() map[string]string {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *HttpRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// http响应
type HttpResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 状态码
	Status int32 `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	// 响应头
	Headers map[string]string `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// 响应体
	Body          []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *HttpResponse) Reset() {
	*x = HttpResponse{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HttpResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HttpResponse) ProtoMessage() {}

func (x *HttpResponse) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HttpResponse.ProtoReflect.Descriptor instead.
func (*HttpResponse) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{9}
}

func (x *HttpResponse) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *HttpResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *HttpResponse) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

// 频道消息请求
type ChannelMessageReq struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 频道id
	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	// 频道类型
	ChannelType uint32 `protobuf:"varint,2,opt,name=channelType,proto3" json:"channelType,omitempty"`
	// 消息开始序号
	StartMessageSeq uint64 `protobuf:"varint,3,opt,name=startMessageSeq,proto3" json:"startMessageSeq,omitempty"`
	// 查询数量，默认100
	Limit         uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelMessageReq) Reset() {
	*x = ChannelMessageReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageReq) ProtoMessage() {}

func (x *ChannelMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageReq.ProtoReflect.Descriptor instead.
func (*ChannelMessageReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{10}
}

func (x *ChannelMessageReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageReq) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *ChannelMessageReq) GetStartMessageSeq() uint64 {
	if x != nil {
		return x.StartMessageSeq
	}
	return 0
}

func (x *ChannelMessageReq) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ChannelMessageBatchReq struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	ChannelMessageReqs []*ChannelMessageReq   `protobuf:"bytes,1,rep,name=channelMessageReqs,proto3" json:"channelMessageReqs,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *ChannelMessageBatchReq) Reset() {
	*x = ChannelMessageBatchReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelMessageBatchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageBatchReq) ProtoMessage() {}

func (x *ChannelMessageBatchReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageBatchReq.ProtoReflect.Descriptor instead.
func (*ChannelMessageBatchReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{11}
}

func (x *ChannelMessageBatchReq) GetChannelMessageReqs() []*ChannelMessageReq {
	if x != nil {
		return x.ChannelMessageReqs
	}
	return nil
}

// 频道消息请求
type ChannelMessageResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 频道id
	ChannelId string `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`
	// 频道类型
	ChannelType uint32 `protobuf:"varint,2,opt,name=channelType,proto3" json:"channelType,omitempty"`
	// 消息开始序号
	StartMessageSeq uint64 `protobuf:"varint,3,opt,name=startMessageSeq,proto3" json:"startMessageSeq,omitempty"`
	// 查询数量，默认100
	Limit uint32 `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
	// 消息列表
	Messages      []*Message `protobuf:"bytes,5,rep,name=messages,proto3" json:"messages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelMessageResp) Reset() {
	*x = ChannelMessageResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelMessageResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageResp) ProtoMessage() {}

func (x *ChannelMessageResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageResp.ProtoReflect.Descriptor instead.
func (*ChannelMessageResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{12}
}

func (x *ChannelMessageResp) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelMessageResp) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *ChannelMessageResp) GetStartMessageSeq() uint64 {
	if x != nil {
		return x.StartMessageSeq
	}
	return 0
}

func (x *ChannelMessageResp) GetLimit() uint32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ChannelMessageResp) GetMessages() []*Message {
	if x != nil {
		return x.Messages
	}
	return nil
}

type ChannelMessageBatchResp struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	ChannelMessageResps []*ChannelMessageResp  `protobuf:"bytes,1,rep,name=channelMessageResps,proto3" json:"channelMessageResps,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *ChannelMessageBatchResp) Reset() {
	*x = ChannelMessageBatchResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelMessageBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelMessageBatchResp) ProtoMessage() {}

func (x *ChannelMessageBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelMessageBatchResp.ProtoReflect.Descriptor instead.
func (*ChannelMessageBatchResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{13}
}

func (x *ChannelMessageBatchResp) GetChannelMessageResps() []*ChannelMessageResp {
	if x != nil {
		return x.ChannelMessageResps
	}
	return nil
}

// wukongim的分布式配置
type ClusterConfig struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Nodes         []*Node                `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes,omitempty"` // 分布式中的节点
	Slots         []*Slot                `protobuf:"bytes,2,rep,name=slots,proto3" json:"slots,omitempty"` // 分布式中的槽位
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterConfig) Reset() {
	*x = ClusterConfig{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfig) ProtoMessage() {}

func (x *ClusterConfig) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfig.ProtoReflect.Descriptor instead.
func (*ClusterConfig) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{14}
}

func (x *ClusterConfig) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ClusterConfig) GetSlots() []*Slot {
	if x != nil {
		return x.Slots
	}
	return nil
}

// wk节点
type Node struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                      // 节点id
	ClusterAddr   string                 `protobuf:"bytes,2,opt,name=clusterAddr,proto3" json:"clusterAddr,omitempty"`     // 节点分布式通讯地址
	ApiServerAddr string                 `protobuf:"bytes,3,opt,name=apiServerAddr,proto3" json:"apiServerAddr,omitempty"` // 节点api服务地址
	Online        bool                   `protobuf:"varint,4,opt,name=online,proto3" json:"online,omitempty"`              // 是否在线
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Node) Reset() {
	*x = Node{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{15}
}

func (x *Node) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Node) GetClusterAddr() string {
	if x != nil {
		return x.ClusterAddr
	}
	return ""
}

func (x *Node) GetApiServerAddr() string {
	if x != nil {
		return x.ApiServerAddr
	}
	return ""
}

func (x *Node) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

// wk的slot
type Slot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                    // 槽位id
	Leader        uint64                 `protobuf:"varint,2,opt,name=leader,proto3" json:"leader,omitempty"`            // 槽位的领导节点
	Term          uint32                 `protobuf:"varint,3,opt,name=term,proto3" json:"term,omitempty"`                // 槽位的领导任期
	Replicas      []uint64               `protobuf:"varint,4,rep,packed,name=replicas,proto3" json:"replicas,omitempty"` // 副本节点(包含领导节点)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Slot) Reset() {
	*x = Slot{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Slot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Slot) ProtoMessage() {}

func (x *Slot) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Slot.ProtoReflect.Descriptor instead.
func (*Slot) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{16}
}

func (x *Slot) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Slot) GetLeader() uint64 {
	if x != nil {
		return x.Leader
	}
	return 0
}

func (x *Slot) GetTerm() uint32 {
	if x != nil {
		return x.Term
	}
	return 0
}

func (x *Slot) GetReplicas() []uint64 {
	if x != nil {
		return x.Replicas
	}
	return nil
}

// 频道对象
type Channel struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ChannelId     string                 `protobuf:"bytes,1,opt,name=channelId,proto3" json:"channelId,omitempty"`      // 频道id
	ChannelType   uint32                 `protobuf:"varint,2,opt,name=channelType,proto3" json:"channelType,omitempty"` // 频道类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Channel) Reset() {
	*x = Channel{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{17}
}

func (x *Channel) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Channel) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

// 频道节点请求
type ClusterChannelBelongNodeReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []*Channel             `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"` // 频道列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterChannelBelongNodeReq) Reset() {
	*x = ClusterChannelBelongNodeReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterChannelBelongNodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterChannelBelongNodeReq) ProtoMessage() {}

func (x *ClusterChannelBelongNodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterChannelBelongNodeReq.ProtoReflect.Descriptor instead.
func (*ClusterChannelBelongNodeReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{18}
}

func (x *ClusterChannelBelongNodeReq) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

// 频道节点响应
type ClusterChannelBelongNodeResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NodeId        uint64                 `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`    // 频道节点Id
	Channels      []*Channel             `protobuf:"bytes,2,rep,name=channels,proto3" json:"channels,omitempty"` // 频道列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ClusterChannelBelongNodeResp) Reset() {
	*x = ClusterChannelBelongNodeResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterChannelBelongNodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterChannelBelongNodeResp) ProtoMessage() {}

func (x *ClusterChannelBelongNodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterChannelBelongNodeResp.ProtoReflect.Descriptor instead.
func (*ClusterChannelBelongNodeResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{19}
}

func (x *ClusterChannelBelongNodeResp) GetNodeId() uint64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *ClusterChannelBelongNodeResp) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

// 频道节点批量响应
type ClusterChannelBelongNodeBatchResp struct {
	state                         protoimpl.MessageState          `protogen:"open.v1"`
	ClusterChannelBelongNodeResps []*ClusterChannelBelongNodeResp `protobuf:"bytes,1,rep,name=clusterChannelBelongNodeResps,proto3" json:"clusterChannelBelongNodeResps,omitempty"`
	unknownFields                 protoimpl.UnknownFields
	sizeCache                     protoimpl.SizeCache
}

func (x *ClusterChannelBelongNodeBatchResp) Reset() {
	*x = ClusterChannelBelongNodeBatchResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ClusterChannelBelongNodeBatchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterChannelBelongNodeBatchResp) ProtoMessage() {}

func (x *ClusterChannelBelongNodeBatchResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterChannelBelongNodeBatchResp.ProtoReflect.Descriptor instead.
func (*ClusterChannelBelongNodeBatchResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{20}
}

func (x *ClusterChannelBelongNodeBatchResp) GetClusterChannelBelongNodeResps() []*ClusterChannelBelongNodeResp {
	if x != nil {
		return x.ClusterChannelBelongNodeResps
	}
	return nil
}

// http请求转发
type ForwardHttpReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PluginNo      string                 `protobuf:"bytes,1,opt,name=pluginNo,proto3" json:"pluginNo,omitempty"`  // 插件编号
	ToNodeId      int64                  `protobuf:"varint,2,opt,name=toNodeId,proto3" json:"toNodeId,omitempty"` // 目标节点id,如果为0则表示本节点,-1为所有节点
	Request       *HttpRequest           `protobuf:"bytes,3,opt,name=request,proto3" json:"request,omitempty"`    // 请求
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ForwardHttpReq) Reset() {
	*x = ForwardHttpReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ForwardHttpReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardHttpReq) ProtoMessage() {}

func (x *ForwardHttpReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardHttpReq.ProtoReflect.Descriptor instead.
func (*ForwardHttpReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{21}
}

func (x *ForwardHttpReq) GetPluginNo() string {
	if x != nil {
		return x.PluginNo
	}
	return ""
}

func (x *ForwardHttpReq) GetToNodeId() int64 {
	if x != nil {
		return x.ToNodeId
	}
	return 0
}

func (x *ForwardHttpReq) GetRequest() *HttpRequest {
	if x != nil {
		return x.Request
	}
	return nil
}

// 最近会话频道请求
type ConversationChannelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uid           string                 `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"` // 用户uid
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationChannelReq) Reset() {
	*x = ConversationChannelReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationChannelReq) ProtoMessage() {}

func (x *ConversationChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationChannelReq.ProtoReflect.Descriptor instead.
func (*ConversationChannelReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{22}
}

func (x *ConversationChannelReq) GetUid() string {
	if x != nil {
		return x.Uid
	}
	return ""
}

// 最近会话频道响应
type ConversationChannelResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Channels      []*Channel             `protobuf:"bytes,1,rep,name=channels,proto3" json:"channels,omitempty"` // 频道列表
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConversationChannelResp) Reset() {
	*x = ConversationChannelResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConversationChannelResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConversationChannelResp) ProtoMessage() {}

func (x *ConversationChannelResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConversationChannelResp.ProtoReflect.Descriptor instead.
func (*ConversationChannelResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{23}
}

func (x *ConversationChannelResp) GetChannels() []*Channel {
	if x != nil {
		return x.Channels
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NoPersist     bool                   `protobuf:"varint,1,opt,name=noPersist,proto3" json:"noPersist,omitempty"` // 是否持久化
	RedDot        bool                   `protobuf:"varint,2,opt,name=redDot,proto3" json:"redDot,omitempty"`       // 是否红点
	SyncOnce      bool                   `protobuf:"varint,3,opt,name=syncOnce,proto3" json:"syncOnce,omitempty"`   // 是否同步一次
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{24}
}

func (x *Header) GetNoPersist() bool {
	if x != nil {
		return x.NoPersist
	}
	return false
}

func (x *Header) GetRedDot() bool {
	if x != nil {
		return x.RedDot
	}
	return false
}

func (x *Header) GetSyncOnce() bool {
	if x != nil {
		return x.SyncOnce
	}
	return false
}

// 流基本信息
type Stream struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`            // 头部
	ClientMsgNo   string                 `protobuf:"bytes,2,opt,name=clientMsgNo,proto3" json:"clientMsgNo,omitempty"`  // 客户端消息编号（相同编号，客户端只会显示一条，可以为空）
	FromUid       string                 `protobuf:"bytes,3,opt,name=fromUid,proto3" json:"fromUid,omitempty"`          // 发送者uid
	ChannelId     string                 `protobuf:"bytes,4,opt,name=channelId,proto3" json:"channelId,omitempty"`      // 频道id
	ChannelType   uint32                 `protobuf:"varint,5,opt,name=channelType,proto3" json:"channelType,omitempty"` // 频道类型
	Payload       []byte                 `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`          // 消息内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Stream) Reset() {
	*x = Stream{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Stream) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stream) ProtoMessage() {}

func (x *Stream) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stream.ProtoReflect.Descriptor instead.
func (*Stream) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{25}
}

func (x *Stream) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *Stream) GetClientMsgNo() string {
	if x != nil {
		return x.ClientMsgNo
	}
	return ""
}

func (x *Stream) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *Stream) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *Stream) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *Stream) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 流开启结果
type StreamOpenResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamNo      string                 `protobuf:"bytes,1,opt,name=streamNo,proto3" json:"streamNo,omitempty"` // 流编号
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamOpenResp) Reset() {
	*x = StreamOpenResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamOpenResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamOpenResp) ProtoMessage() {}

func (x *StreamOpenResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamOpenResp.ProtoReflect.Descriptor instead.
func (*StreamOpenResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{26}
}

func (x *StreamOpenResp) GetStreamNo() string {
	if x != nil {
		return x.StreamNo
	}
	return ""
}

// 流关闭请求
type StreamCloseReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StreamNo      string                 `protobuf:"bytes,1,opt,name=streamNo,proto3" json:"streamNo,omitempty"`        // 流编号
	ChannelId     string                 `protobuf:"bytes,2,opt,name=channelId,proto3" json:"channelId,omitempty"`      // 频道id
	ChannelType   uint32                 `protobuf:"varint,3,opt,name=channelType,proto3" json:"channelType,omitempty"` // 频道类型
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamCloseReq) Reset() {
	*x = StreamCloseReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamCloseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamCloseReq) ProtoMessage() {}

func (x *StreamCloseReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamCloseReq.ProtoReflect.Descriptor instead.
func (*StreamCloseReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{27}
}

func (x *StreamCloseReq) GetStreamNo() string {
	if x != nil {
		return x.StreamNo
	}
	return ""
}

func (x *StreamCloseReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *StreamCloseReq) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

// 流写入请求
type StreamWriteReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`            // 头部
	StreamNo      string                 `protobuf:"bytes,2,opt,name=streamNo,proto3" json:"streamNo,omitempty"`        // 流编号
	ClientMsgNo   string                 `protobuf:"bytes,3,opt,name=clientMsgNo,proto3" json:"clientMsgNo,omitempty"`  // 客户端消息编号（相同编号，客户端只会显示一条，可以为空）
	FromUid       string                 `protobuf:"bytes,4,opt,name=fromUid,proto3" json:"fromUid,omitempty"`          // 发送者uid
	ChannelId     string                 `protobuf:"bytes,5,opt,name=channelId,proto3" json:"channelId,omitempty"`      // 频道id
	ChannelType   uint32                 `protobuf:"varint,6,opt,name=channelType,proto3" json:"channelType,omitempty"` // 频道类型
	Payload       []byte                 `protobuf:"bytes,7,opt,name=payload,proto3" json:"payload,omitempty"`          // 消息内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamWriteReq) Reset() {
	*x = StreamWriteReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamWriteReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteReq) ProtoMessage() {}

func (x *StreamWriteReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteReq.ProtoReflect.Descriptor instead.
func (*StreamWriteReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{28}
}

func (x *StreamWriteReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *StreamWriteReq) GetStreamNo() string {
	if x != nil {
		return x.StreamNo
	}
	return ""
}

func (x *StreamWriteReq) GetClientMsgNo() string {
	if x != nil {
		return x.ClientMsgNo
	}
	return ""
}

func (x *StreamWriteReq) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *StreamWriteReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *StreamWriteReq) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *StreamWriteReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 流写入结果
type StreamWriteResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 消息唯一id（全局唯一）
	MessageId int64 `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	// 客户端消息编号
	ClientMsgNo   string `protobuf:"bytes,2,opt,name=clientMsgNo,proto3" json:"clientMsgNo,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StreamWriteResp) Reset() {
	*x = StreamWriteResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StreamWriteResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamWriteResp) ProtoMessage() {}

func (x *StreamWriteResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamWriteResp.ProtoReflect.Descriptor instead.
func (*StreamWriteResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{29}
}

func (x *StreamWriteResp) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *StreamWriteResp) GetClientMsgNo() string {
	if x != nil {
		return x.ClientMsgNo
	}
	return ""
}

// 发送消息请求
type SendReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Header        *Header                `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`            // 头部
	ClientMsgNo   string                 `protobuf:"bytes,2,opt,name=clientMsgNo,proto3" json:"clientMsgNo,omitempty"`  // 客户端消息编号（相同编号，客户端只会显示一条，可以为空）
	FromUid       string                 `protobuf:"bytes,3,opt,name=fromUid,proto3" json:"fromUid,omitempty"`          // 发送者
	ChannelId     string                 `protobuf:"bytes,4,opt,name=channelId,proto3" json:"channelId,omitempty"`      // 频道id
	ChannelType   uint32                 `protobuf:"varint,5,opt,name=channelType,proto3" json:"channelType,omitempty"` // 频道类型
	Payload       []byte                 `protobuf:"bytes,6,opt,name=payload,proto3" json:"payload,omitempty"`          // 消息内容
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendReq) Reset() {
	*x = SendReq{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendReq) ProtoMessage() {}

func (x *SendReq) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendReq.ProtoReflect.Descriptor instead.
func (*SendReq) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{30}
}

func (x *SendReq) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *SendReq) GetClientMsgNo() string {
	if x != nil {
		return x.ClientMsgNo
	}
	return ""
}

func (x *SendReq) GetFromUid() string {
	if x != nil {
		return x.FromUid
	}
	return ""
}

func (x *SendReq) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SendReq) GetChannelType() uint32 {
	if x != nil {
		return x.ChannelType
	}
	return 0
}

func (x *SendReq) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// 发送消息响应
type SendResp struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// 消息唯一id（全局唯一）
	MessageId     int64 `protobuf:"varint,1,opt,name=messageId,proto3" json:"messageId,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SendResp) Reset() {
	*x = SendResp{}
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendResp) ProtoMessage() {}

func (x *SendResp) ProtoReflect() protoreflect.Message {
	mi := &file_internal_types_pluginproto_plugin_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendResp.ProtoReflect.Descriptor instead.
func (*SendResp) Descriptor() ([]byte, []int) {
	return file_internal_types_pluginproto_plugin_proto_rawDescGZIP(), []int{31}
}

func (x *SendResp) GetMessageId() int64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

var File_internal_types_pluginproto_plugin_proto protoreflect.FileDescriptor

var file_internal_types_pluginproto_plugin_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x02, 0x0a, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x6e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x6e, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65, 0x72, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x10, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x41, 0x66, 0x74, 0x65,
	0x72, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53, 0x79,
	0x6e, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65, 0x70, 0x6c, 0x79, 0x53,
	0x79, 0x6e, 0x63, 0x12, 0x43, 0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x22, 0x45, 0x0a, 0x05, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x3c, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x12, 0x2a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x22, 0x8f, 0x01,
	0x0a, 0x0b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6e, 0x64, 0x62,
	0x6f, 0x78, 0x44, 0x69, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x61, 0x6e,
	0x64, 0x62, 0x6f, 0x78, 0x44, 0x69, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22,
	0x80, 0x01, 0x0a, 0x0a, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x22, 0x96, 0x01, 0x0a, 0x0a, 0x52, 0x65, 0x63, 0x76, 0x50, 0x61, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x55, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x55, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xc3, 0x02, 0x0a, 0x07,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x71, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x53, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d,
	0x73, 0x67, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x4e, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0x40, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x22, 0xbf, 0x02, 0x0a, 0x0b, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12,
	0x3f, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48,
	0x74, 0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x39, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a,
	0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x38, 0x0a, 0x0a, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb8, 0x01, 0x0a, 0x0c, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x40,
	0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x74,
	0x74, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x62, 0x6f, 0x64, 0x79, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x93, 0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0x68, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x4e, 0x0a, 0x12, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x52, 0x12, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x73,
	0x22, 0xc6, 0x01, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65, 0x71, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x53, 0x65,
	0x71, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x30, 0x0a, 0x08, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x08, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x22, 0x6c, 0x0a, 0x17, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x52, 0x13, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x73, 0x22, 0x61, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x27, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x27, 0x0a, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x6c, 0x6f, 0x74, 0x52, 0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x76, 0x0a, 0x04, 0x4e, 0x6f,
	0x64, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x70, 0x69, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x61, 0x70, 0x69,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x6e, 0x6c, 0x69,
	0x6e, 0x65, 0x22, 0x5e, 0x0a, 0x04, 0x53, 0x6c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x6c, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x74, 0x65, 0x72, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x04, 0x52, 0x08, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x73, 0x22, 0x49, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4f, 0x0a,
	0x1b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42,
	0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x30, 0x0a, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x68,
	0x0a, 0x1c, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x21, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x42, 0x65, 0x6c, 0x6f, 0x6e,
	0x67, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6f,
	0x0a, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x52, 0x1d, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x42, 0x65, 0x6c, 0x6f, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x73, 0x22,
	0x7c, 0x0a, 0x0e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x6f, 0x12, 0x1a, 0x0a,
	0x08, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x74, 0x6f, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x07, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x69, 0x64, 0x22, 0x4b, 0x0a, 0x17, 0x43, 0x6f, 0x6e,
	0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x08, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x22, 0x5a, 0x0a, 0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x6f, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x72, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x72, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x6e,
	0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x63, 0x4f, 0x6e,
	0x63, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x2b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x2c, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4f, 0x70, 0x65, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x22, 0x6c,
	0x0a, 0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x12, 0x1c, 0x0a, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x22, 0xef, 0x01, 0x0a,
	0x0e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x2b, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4e, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x72,
	0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x72, 0x6f,
	0x6d, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x51,
	0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x20, 0x0a, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e,
	0x6f, 0x22, 0xcc, 0x01, 0x0a, 0x07, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x12, 0x2b, 0x0a,
	0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x4e, 0x6f, 0x12, 0x18, 0x0a, 0x07,
	0x66, 0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66,
	0x72, 0x6f, 0x6d, 0x55, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0x28, 0x0a, 0x08, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x42, 0x10, 0x5a, 0x0e, 0x2e, 0x2f,
	0x3b, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_internal_types_pluginproto_plugin_proto_rawDescOnce sync.Once
	file_internal_types_pluginproto_plugin_proto_rawDescData = file_internal_types_pluginproto_plugin_proto_rawDesc
)

func file_internal_types_pluginproto_plugin_proto_rawDescGZIP() []byte {
	file_internal_types_pluginproto_plugin_proto_rawDescOnce.Do(func() {
		file_internal_types_pluginproto_plugin_proto_rawDescData = protoimpl.X.CompressGZIP(file_internal_types_pluginproto_plugin_proto_rawDescData)
	})
	return file_internal_types_pluginproto_plugin_proto_rawDescData
}

var file_internal_types_pluginproto_plugin_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_internal_types_pluginproto_plugin_proto_goTypes = []any{
	(*PluginInfo)(nil),                        // 0: pluginproto.PluginInfo
	(*Field)(nil),                             // 1: pluginproto.Field
	(*ConfigTemplate)(nil),                    // 2: pluginproto.ConfigTemplate
	(*StartupResp)(nil),                       // 3: pluginproto.StartupResp
	(*SendPacket)(nil),                        // 4: pluginproto.SendPacket
	(*RecvPacket)(nil),                        // 5: pluginproto.RecvPacket
	(*Message)(nil),                           // 6: pluginproto.Message
	(*MessageBatch)(nil),                      // 7: pluginproto.MessageBatch
	(*HttpRequest)(nil),                       // 8: pluginproto.HttpRequest
	(*HttpResponse)(nil),                      // 9: pluginproto.HttpResponse
	(*ChannelMessageReq)(nil),                 // 10: pluginproto.ChannelMessageReq
	(*ChannelMessageBatchReq)(nil),            // 11: pluginproto.ChannelMessageBatchReq
	(*ChannelMessageResp)(nil),                // 12: pluginproto.ChannelMessageResp
	(*ChannelMessageBatchResp)(nil),           // 13: pluginproto.ChannelMessageBatchResp
	(*ClusterConfig)(nil),                     // 14: pluginproto.ClusterConfig
	(*Node)(nil),                              // 15: pluginproto.Node
	(*Slot)(nil),                              // 16: pluginproto.Slot
	(*Channel)(nil),                           // 17: pluginproto.Channel
	(*ClusterChannelBelongNodeReq)(nil),       // 18: pluginproto.ClusterChannelBelongNodeReq
	(*ClusterChannelBelongNodeResp)(nil),      // 19: pluginproto.ClusterChannelBelongNodeResp
	(*ClusterChannelBelongNodeBatchResp)(nil), // 20: pluginproto.ClusterChannelBelongNodeBatchResp
	(*ForwardHttpReq)(nil),                    // 21: pluginproto.ForwardHttpReq
	(*ConversationChannelReq)(nil),            // 22: pluginproto.ConversationChannelReq
	(*ConversationChannelResp)(nil),           // 23: pluginproto.ConversationChannelResp
	(*Header)(nil),                            // 24: pluginproto.Header
	(*Stream)(nil),                            // 25: pluginproto.Stream
	(*StreamOpenResp)(nil),                    // 26: pluginproto.StreamOpenResp
	(*StreamCloseReq)(nil),                    // 27: pluginproto.StreamCloseReq
	(*StreamWriteReq)(nil),                    // 28: pluginproto.StreamWriteReq
	(*StreamWriteResp)(nil),                   // 29: pluginproto.StreamWriteResp
	(*SendReq)(nil),                           // 30: pluginproto.SendReq
	(*SendResp)(nil),                          // 31: pluginproto.SendResp
	nil,                                       // 32: pluginproto.HttpRequest.HeadersEntry
	nil,                                       // 33: pluginproto.HttpRequest.QueryEntry
	nil,                                       // 34: pluginproto.HttpResponse.HeadersEntry
}
var file_internal_types_pluginproto_plugin_proto_depIdxs = []int32{
	2,  // 0: pluginproto.PluginInfo.configTemplate:type_name -> pluginproto.ConfigTemplate
	1,  // 1: pluginproto.ConfigTemplate.fields:type_name -> pluginproto.Field
	6,  // 2: pluginproto.MessageBatch.messages:type_name -> pluginproto.Message
	32, // 3: pluginproto.HttpRequest.headers:type_name -> pluginproto.HttpRequest.HeadersEntry
	33, // 4: pluginproto.HttpRequest.query:type_name -> pluginproto.HttpRequest.QueryEntry
	34, // 5: pluginproto.HttpResponse.headers:type_name -> pluginproto.HttpResponse.HeadersEntry
	10, // 6: pluginproto.ChannelMessageBatchReq.channelMessageReqs:type_name -> pluginproto.ChannelMessageReq
	6,  // 7: pluginproto.ChannelMessageResp.messages:type_name -> pluginproto.Message
	12, // 8: pluginproto.ChannelMessageBatchResp.channelMessageResps:type_name -> pluginproto.ChannelMessageResp
	15, // 9: pluginproto.ClusterConfig.nodes:type_name -> pluginproto.Node
	16, // 10: pluginproto.ClusterConfig.slots:type_name -> pluginproto.Slot
	17, // 11: pluginproto.ClusterChannelBelongNodeReq.channels:type_name -> pluginproto.Channel
	17, // 12: pluginproto.ClusterChannelBelongNodeResp.channels:type_name -> pluginproto.Channel
	19, // 13: pluginproto.ClusterChannelBelongNodeBatchResp.clusterChannelBelongNodeResps:type_name -> pluginproto.ClusterChannelBelongNodeResp
	8,  // 14: pluginproto.ForwardHttpReq.request:type_name -> pluginproto.HttpRequest
	17, // 15: pluginproto.ConversationChannelResp.channels:type_name -> pluginproto.Channel
	24, // 16: pluginproto.Stream.header:type_name -> pluginproto.Header
	24, // 17: pluginproto.StreamWriteReq.header:type_name -> pluginproto.Header
	24, // 18: pluginproto.SendReq.header:type_name -> pluginproto.Header
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_internal_types_pluginproto_plugin_proto_init() }
func file_internal_types_pluginproto_plugin_proto_init() {
	if File_internal_types_pluginproto_plugin_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_internal_types_pluginproto_plugin_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_internal_types_pluginproto_plugin_proto_goTypes,
		DependencyIndexes: file_internal_types_pluginproto_plugin_proto_depIdxs,
		MessageInfos:      file_internal_types_pluginproto_plugin_proto_msgTypes,
	}.Build()
	File_internal_types_pluginproto_plugin_proto = out.File
	file_internal_types_pluginproto_plugin_proto_rawDesc = nil
	file_internal_types_pluginproto_plugin_proto_goTypes = nil
	file_internal_types_pluginproto_plugin_proto_depIdxs = nil
}
